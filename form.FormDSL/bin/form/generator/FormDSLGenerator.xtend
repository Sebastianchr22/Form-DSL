/*
 * generated by Xtext 2.24.0
 */
package form.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import form.formDSL.Form
import form.formDSL.Input
import form.formDSL.Name
import form.formDSL.Type

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FormDSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val form = resource.allContents.filter(Form).next

		fsa.generateFile("someFile.html", form.compileClass);
	}

	def dispatch CharSequence compute(Input input) {
		val type = input.type.compute
		val name = input.name.compute
		'''
			<label>«name»:</label>
			<«input.type.compileInput» placeholder="«name»">
			
		'''
	// "shortText" | "date" | "number" | "money" | "email" | "longText" | "stringNumber"
	}

	def dispatch CharSequence compute(Name name) {
		name.text
	}

	def dispatch String compute(Type type) {
		type.text
//<input type="number" min="0" max="10000" step="1" name="Broker_Fees" id="broker_fees" required="required">
	}

	def CharSequence compileInput(Type type) {
		switch (type.text) {
			case "longText": '''textarea rows="8" cols="50"'''
			case "shortText": '''input type="text"'''
		}
	}

	def CharSequence compileClass(Form form) {
		'''
			<form>
				«FOR input : form.content»
					«input.compute»
					<br>
				«ENDFOR»
				<input type="submit" value="submit" onClick="submitHandler()">
			</form>
			«form.compilejs»
		'''
	}

	def CharSequence compilejs(Form form) {
		'''
			<script>
			function submitHandler(){
				//todo
			}
			</script>
		'''
	}

}
