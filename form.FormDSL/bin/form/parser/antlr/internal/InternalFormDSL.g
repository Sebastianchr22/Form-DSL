/*
 * generated by Xtext 2.25.0
 */
grammar InternalFormDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package form.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package form.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import form.services.FormDSLGrammarAccess;

}

@parser::members {

 	private FormDSLGrammarAccess grammarAccess;

    public InternalFormDSLParser(TokenStream input, FormDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Form";
   	}

   	@Override
   	protected FormDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleForm
entryRuleForm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormRule()); }
	iv_ruleForm=ruleForm
	{ $current=$iv_ruleForm.current; }
	EOF;

// Rule Form
ruleForm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFormAccess().getFormAction_0(),
					$current);
			}
		)
		otherlv_1='form'
		{
			newLeafNode(otherlv_1, grammarAccess.getFormAccess().getFormKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormAccess().getContentInputParserRuleCall_2_0());
				}
				lv_content_2_0=ruleInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormRule());
					}
					add(
						$current,
						"content",
						lv_content_2_0,
						"form.FormDSL.Input");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"form.FormDSL.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getNameNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"form.FormDSL.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					add(
						$current,
						"expression",
						lv_expression_2_0,
						"form.FormDSL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getShortTextAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_text_1_0='shortText'
					{
						newLeafNode(lv_text_1_0, grammarAccess.getTypeAccess().getTextShortTextKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "text", lv_text_1_0, "shortText");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getGenericAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_text_3_0='date'
					{
						newLeafNode(lv_text_3_0, grammarAccess.getTypeAccess().getTextDateKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "text", lv_text_3_0, "date");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getGenericAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_text_5_0='number'
					{
						newLeafNode(lv_text_5_0, grammarAccess.getTypeAccess().getTextNumberKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "text", lv_text_5_0, "number");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getMoneyAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_text_7_0='money'
					{
						newLeafNode(lv_text_7_0, grammarAccess.getTypeAccess().getTextMoneyKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "text", lv_text_7_0, "money");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getGenericAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_text_9_0='email'
					{
						newLeafNode(lv_text_9_0, grammarAccess.getTypeAccess().getTextEmailKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "text", lv_text_9_0, "email");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getLongTextAction_5_0(),
						$current);
				}
			)
			(
				(
					lv_text_11_0='longText'
					{
						newLeafNode(lv_text_11_0, grammarAccess.getTypeAccess().getTextLongTextKeyword_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "text", lv_text_11_0, "longText");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getStringNumberAction_6_0(),
						$current);
				}
			)
			(
				(
					lv_text_13_0='stringNumber'
					{
						newLeafNode(lv_text_13_0, grammarAccess.getTypeAccess().getTextStringNumberKeyword_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "text", lv_text_13_0, "stringNumber");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleName
entryRuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current; }
	EOF;

// Rule Name
ruleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_text_0_0=RULE_STRING
			{
				newLeafNode(lv_text_0_0, grammarAccess.getNameAccess().getTextSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNameRule());
				}
				setWithLastConsumed(
					$current,
					"text",
					lv_text_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_text_0_0='optional'
				{
					newLeafNode(lv_text_0_0, grammarAccess.getExpressionAccess().getTextOptionalKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpressionRule());
					}
					setWithLastConsumed($current, "text", lv_text_0_0, "optional");
				}
			)
		)
		    |
		(
			(
				lv_text_1_0='focus'
				{
					newLeafNode(lv_text_1_0, grammarAccess.getExpressionAccess().getTextFocusKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpressionRule());
					}
					setWithLastConsumed($current, "text", lv_text_1_0, "focus");
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getExpParserRuleCall_2());
		}
		this_Exp_2=ruleExp
		{
			$current = $this_Exp_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExp
entryRuleExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	iv_ruleExp=ruleExp
	{ $current=$iv_ruleExp.current; }
	EOF;

// Rule Exp
ruleExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_text_0_0='is'
					{
						newLeafNode(lv_text_0_0, grammarAccess.getExpAccess().getTextIsKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpRule());
						}
						setWithLastConsumed($current, "text", lv_text_0_0, "is");
					}
				)
			)
			    |
			(
				(
					lv_text_1_0='length'
					{
						newLeafNode(lv_text_1_0, grammarAccess.getExpAccess().getTextLengthKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpRule());
						}
						setWithLastConsumed($current, "text", lv_text_1_0, "length");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpAccess().getCompComparisonParserRuleCall_1_0());
				}
				lv_comp_2_0=ruleComparison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpRule());
					}
					set(
						$current,
						"comp",
						lv_comp_2_0,
						"form.FormDSL.Comparison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getExpAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='<'
			{
				newLeafNode(otherlv_0, grammarAccess.getComparisonAccess().getLessThanSignKeyword_0_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparisonAccess().getLessThanAction_0_1(),
						$current);
				}
			)
		)
		    |
		(
			otherlv_2='>'
			{
				newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparisonAccess().getGreaterThanAction_1_1(),
						$current);
				}
			)
		)
		    |
		(
			otherlv_4='<='
			{
				newLeafNode(otherlv_4, grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_2_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparisonAccess().getGreaterThaninclusiveAction_2_1(),
						$current);
				}
			)
		)
		    |
		(
			otherlv_6='>='
			{
				newLeafNode(otherlv_6, grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_3_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparisonAccess().getLessThanInclusiveAction_3_1(),
						$current);
				}
			)
		)
		    |
		(
			otherlv_8='=='
			{
				newLeafNode(otherlv_8, grammarAccess.getComparisonAccess().getEqualsSignEqualsSignKeyword_4_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparisonAccess().getExactlyAction_4_1(),
						$current);
				}
			)
		)
		    |
		(
			otherlv_10='!='
			{
				newLeafNode(otherlv_10, grammarAccess.getComparisonAccess().getExclamationMarkEqualsSignKeyword_5_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getComparisonAccess().getNotAction_5_1(),
						$current);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
