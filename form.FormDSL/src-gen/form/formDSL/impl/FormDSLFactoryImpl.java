/**
 * generated by Xtext 2.25.0
 */
package form.formDSL.impl;

import form.formDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FormDSLFactoryImpl extends EFactoryImpl implements FormDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FormDSLFactory init()
  {
    try
    {
      FormDSLFactory theFormDSLFactory = (FormDSLFactory)EPackage.Registry.INSTANCE.getEFactory(FormDSLPackage.eNS_URI);
      if (theFormDSLFactory != null)
      {
        return theFormDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FormDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FormDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FormDSLPackage.FORM: return createForm();
      case FormDSLPackage.INPUT: return createInput();
      case FormDSLPackage.TYPE: return createType();
      case FormDSLPackage.NAME: return createName();
      case FormDSLPackage.EXPRESSION: return createExpression();
      case FormDSLPackage.EXP: return createExp();
      case FormDSLPackage.COMPARISON: return createComparison();
      case FormDSLPackage.SHORT_TEXT: return createShortText();
      case FormDSLPackage.GENERIC: return createGeneric();
      case FormDSLPackage.MONEY: return createMoney();
      case FormDSLPackage.LONG_TEXT: return createLongText();
      case FormDSLPackage.STRING_NUMBER: return createStringNumber();
      case FormDSLPackage.OPTIONAL: return createOptional();
      case FormDSLPackage.FOCUS: return createFocus();
      case FormDSLPackage.IS: return createIs();
      case FormDSLPackage.LENGTH: return createLength();
      case FormDSLPackage.LESS_THAN: return createLessThan();
      case FormDSLPackage.GREATER_THAN: return createGreaterThan();
      case FormDSLPackage.LESS_THAN_INCLUSIVE: return createLessThanInclusive();
      case FormDSLPackage.GREATER_THAN_INCLUSIVE: return createGreaterThanInclusive();
      case FormDSLPackage.EXACTLY: return createExactly();
      case FormDSLPackage.NOT: return createNot();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Form createForm()
  {
    FormImpl form = new FormImpl();
    return form;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Name createName()
  {
    NameImpl name = new NameImpl();
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp createExp()
  {
    ExpImpl exp = new ExpImpl();
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShortText createShortText()
  {
    ShortTextImpl shortText = new ShortTextImpl();
    return shortText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Generic createGeneric()
  {
    GenericImpl generic = new GenericImpl();
    return generic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Money createMoney()
  {
    MoneyImpl money = new MoneyImpl();
    return money;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LongText createLongText()
  {
    LongTextImpl longText = new LongTextImpl();
    return longText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringNumber createStringNumber()
  {
    StringNumberImpl stringNumber = new StringNumberImpl();
    return stringNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Optional createOptional()
  {
    OptionalImpl optional = new OptionalImpl();
    return optional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Focus createFocus()
  {
    FocusImpl focus = new FocusImpl();
    return focus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Is createIs()
  {
    IsImpl is = new IsImpl();
    return is;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Length createLength()
  {
    LengthImpl length = new LengthImpl();
    return length;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessThan createLessThan()
  {
    LessThanImpl lessThan = new LessThanImpl();
    return lessThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterThan createGreaterThan()
  {
    GreaterThanImpl greaterThan = new GreaterThanImpl();
    return greaterThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessThanInclusive createLessThanInclusive()
  {
    LessThanInclusiveImpl lessThanInclusive = new LessThanInclusiveImpl();
    return lessThanInclusive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterThanInclusive createGreaterThanInclusive()
  {
    GreaterThanInclusiveImpl greaterThanInclusive = new GreaterThanInclusiveImpl();
    return greaterThanInclusive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exactly createExactly()
  {
    ExactlyImpl exactly = new ExactlyImpl();
    return exactly;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FormDSLPackage getFormDSLPackage()
  {
    return (FormDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FormDSLPackage getPackage()
  {
    return FormDSLPackage.eINSTANCE;
  }

} //FormDSLFactoryImpl
