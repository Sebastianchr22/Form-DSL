/*
 * generated by Xtext 2.25.0
 */
package form.serializer;

import com.google.inject.Inject;
import form.formDSL.Exactly;
import form.formDSL.Focus;
import form.formDSL.Form;
import form.formDSL.FormDSLPackage;
import form.formDSL.Generic;
import form.formDSL.GreaterThan;
import form.formDSL.GreaterThanInclusive;
import form.formDSL.Input;
import form.formDSL.Is;
import form.formDSL.Length;
import form.formDSL.LessThan;
import form.formDSL.LessThaninclusive;
import form.formDSL.LongText;
import form.formDSL.Money;
import form.formDSL.Name;
import form.formDSL.Not;
import form.formDSL.Optional;
import form.formDSL.ShortText;
import form.formDSL.StringNumber;
import form.services.FormDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FormDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FormDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FormDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FormDSLPackage.EXACTLY:
				sequence_Comparison(context, (Exactly) semanticObject); 
				return; 
			case FormDSLPackage.FOCUS:
				sequence_Expression(context, (Focus) semanticObject); 
				return; 
			case FormDSLPackage.FORM:
				sequence_Form(context, (Form) semanticObject); 
				return; 
			case FormDSLPackage.GENERIC:
				sequence_Type(context, (Generic) semanticObject); 
				return; 
			case FormDSLPackage.GREATER_THAN:
				sequence_Comparison(context, (GreaterThan) semanticObject); 
				return; 
			case FormDSLPackage.GREATER_THAN_INCLUSIVE:
				sequence_Comparison(context, (GreaterThanInclusive) semanticObject); 
				return; 
			case FormDSLPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case FormDSLPackage.IS:
				sequence_Exp(context, (Is) semanticObject); 
				return; 
			case FormDSLPackage.LENGTH:
				sequence_Exp(context, (Length) semanticObject); 
				return; 
			case FormDSLPackage.LESS_THAN:
				sequence_Comparison(context, (LessThan) semanticObject); 
				return; 
			case FormDSLPackage.LESS_THANINCLUSIVE:
				sequence_Comparison(context, (LessThaninclusive) semanticObject); 
				return; 
			case FormDSLPackage.LONG_TEXT:
				sequence_Type(context, (LongText) semanticObject); 
				return; 
			case FormDSLPackage.MONEY:
				sequence_Type(context, (Money) semanticObject); 
				return; 
			case FormDSLPackage.NAME:
				sequence_Name(context, (Name) semanticObject); 
				return; 
			case FormDSLPackage.NOT:
				sequence_Comparison(context, (Not) semanticObject); 
				return; 
			case FormDSLPackage.OPTIONAL:
				sequence_Expression(context, (Optional) semanticObject); 
				return; 
			case FormDSLPackage.SHORT_TEXT:
				sequence_Type(context, (ShortText) semanticObject); 
				return; 
			case FormDSLPackage.STRING_NUMBER:
				sequence_Type(context, (StringNumber) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Comparison returns Exactly
	 *
	 * Constraint:
	 *     {Exactly}
	 */
	protected void sequence_Comparison(ISerializationContext context, Exactly semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comparison returns GreaterThan
	 *
	 * Constraint:
	 *     {GreaterThan}
	 */
	protected void sequence_Comparison(ISerializationContext context, GreaterThan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comparison returns GreaterThanInclusive
	 *
	 * Constraint:
	 *     {GreaterThanInclusive}
	 */
	protected void sequence_Comparison(ISerializationContext context, GreaterThanInclusive semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comparison returns LessThan
	 *
	 * Constraint:
	 *     {LessThan}
	 */
	protected void sequence_Comparison(ISerializationContext context, LessThan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comparison returns LessThaninclusive
	 *
	 * Constraint:
	 *     {LessThaninclusive}
	 */
	protected void sequence_Comparison(ISerializationContext context, LessThaninclusive semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comparison returns Not
	 *
	 * Constraint:
	 *     {Not}
	 */
	protected void sequence_Comparison(ISerializationContext context, Not semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Is
	 *     Exp returns Is
	 *
	 * Constraint:
	 *     (text='is' comp=Comparison value=INT)
	 */
	protected void sequence_Exp(ISerializationContext context, Is semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.EXPRESSION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.EXPRESSION__TEXT));
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.EXP__COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.EXP__COMP));
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.EXP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.EXP__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getTextIsKeyword_0_0_1_0(), semanticObject.getText());
		feeder.accept(grammarAccess.getExpAccess().getCompComparisonParserRuleCall_1_0(), semanticObject.getComp());
		feeder.accept(grammarAccess.getExpAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Length
	 *     Exp returns Length
	 *
	 * Constraint:
	 *     (text='length' comp=Comparison value=INT)
	 */
	protected void sequence_Exp(ISerializationContext context, Length semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.EXPRESSION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.EXPRESSION__TEXT));
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.EXP__COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.EXP__COMP));
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.EXP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.EXP__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getTextLengthKeyword_0_1_1_0(), semanticObject.getText());
		feeder.accept(grammarAccess.getExpAccess().getCompComparisonParserRuleCall_1_0(), semanticObject.getComp());
		feeder.accept(grammarAccess.getExpAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Focus
	 *
	 * Constraint:
	 *     text='focus'
	 */
	protected void sequence_Expression(ISerializationContext context, Focus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.EXPRESSION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.EXPRESSION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getTextFocusKeyword_1_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Optional
	 *
	 * Constraint:
	 *     text='optional'
	 */
	protected void sequence_Expression(ISerializationContext context, Optional semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.EXPRESSION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.EXPRESSION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getTextOptionalKeyword_0_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Form returns Form
	 *
	 * Constraint:
	 *     content+=Input*
	 */
	protected void sequence_Form(ISerializationContext context, Form semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Input returns Input
	 *
	 * Constraint:
	 *     (type=Type name=Name expression+=Expression*)
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Name returns Name
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Name(ISerializationContext context, Name semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.NAME__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.NAME__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameAccess().getTextSTRINGTerminalRuleCall_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Generic
	 *
	 * Constraint:
	 *     (text='date' | text='number' | text='email')
	 */
	protected void sequence_Type(ISerializationContext context, Generic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns LongText
	 *
	 * Constraint:
	 *     text='longText'
	 */
	protected void sequence_Type(ISerializationContext context, LongText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.TYPE__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.TYPE__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getTextLongTextKeyword_5_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Money
	 *
	 * Constraint:
	 *     text='money'
	 */
	protected void sequence_Type(ISerializationContext context, Money semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.TYPE__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.TYPE__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getTextMoneyKeyword_3_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns ShortText
	 *
	 * Constraint:
	 *     text='shortText'
	 */
	protected void sequence_Type(ISerializationContext context, ShortText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.TYPE__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.TYPE__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getTextShortTextKeyword_0_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns StringNumber
	 *
	 * Constraint:
	 *     text='stringNumber'
	 */
	protected void sequence_Type(ISerializationContext context, StringNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormDSLPackage.Literals.TYPE__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormDSLPackage.Literals.TYPE__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getTextStringNumberKeyword_6_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
}
