/**
 * generated by Xtext 2.24.0
 */
package form.generator;

import com.google.common.collect.Iterators;
import form.formDSL.Expression;
import form.formDSL.Focus;
import form.formDSL.Form;
import form.formDSL.Generic;
import form.formDSL.GreaterThanInclusive;
import form.formDSL.Input;
import form.formDSL.Is;
import form.formDSL.Length;
import form.formDSL.LongText;
import form.formDSL.Money;
import form.formDSL.Name;
import form.formDSL.Optional;
import form.formDSL.ShortText;
import form.formDSL.StringNumber;
import form.formDSL.Type;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FormDSLGenerator extends AbstractGenerator {
  private String formClass = "form-control form-control-sm";
  
  private boolean isRequired = true;
  
  private boolean hasFocus = false;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Form form = Iterators.<Form>filter(resource.getAllContents(), Form.class).next();
    fsa.generateFile("someFile.html", this.compileClass(form));
  }
  
  protected CharSequence _compute(final Input input) {
    CharSequence _xblockexpression = null;
    {
      this.hasFocus = false;
      this.isRequired = true;
      EList<Expression> _expression = input.getExpression();
      for (final Expression exp : _expression) {
        this.handleExp(exp);
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<label class=\"form-label\">");
      CharSequence _compute = this.compute(input.getName());
      _builder.append(_compute);
      _builder.append(":</label>");
      _builder.newLineIfNotEmpty();
      CharSequence _compute_1 = this.compute(input.getType(), input.getName());
      _builder.append(_compute_1);
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  protected void _handleExp(final Optional exp) {
    this.isRequired = false;
  }
  
  protected void _handleExp(final Focus exp) {
    this.hasFocus = true;
  }
  
  protected void _handleExp(final Is exp) {
    System.out.println("Is ");
    this.handleExp(exp.getComp());
    System.out.println(exp.getValue());
  }
  
  protected void _handleExp(final Length exp) {
    System.out.println("Length ");
  }
  
  protected void _handleExp(final GreaterThanInclusive exp) {
    System.out.println(">= ");
  }
  
  public CharSequence handleNonMathExp() {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (this.isRequired) {
        _builder.append(" required ");
      }
    }
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    {
      if (this.hasFocus) {
        _builder.append(" autofocus ");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compute(final Generic type, final Name name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<input class=\"");
    _builder.append(this.formClass);
    _builder.append("\" type=\"");
    String _text = type.getText();
    _builder.append(_text);
    _builder.append("\" id=\"");
    _builder.append(name);
    _builder.append("\" placeholder=\"");
    String _text_1 = name.getText();
    _builder.append(_text_1);
    _builder.append("\" ");
    CharSequence _handleNonMathExp = this.handleNonMathExp();
    _builder.append(_handleNonMathExp);
    _builder.append(">");
    return _builder;
  }
  
  protected CharSequence _compute(final LongText type, final Name name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<textarea class=\"");
    _builder.append(this.formClass);
    _builder.append("\" id=\"");
    _builder.append(name);
    _builder.append("\" rows=\"8\" cols=\"50\" placeholder=\"");
    String _text = name.getText();
    _builder.append(_text);
    _builder.append("\" ");
    CharSequence _handleNonMathExp = this.handleNonMathExp();
    _builder.append(_handleNonMathExp);
    _builder.append("></textarea>");
    return _builder;
  }
  
  protected CharSequence _compute(final Money type, final Name name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<input class=\"");
    _builder.append(this.formClass);
    _builder.append("\" type=\"number\" min=\"0.00\" max=\"10000.00\" step=\"0.01\" placeholder=\"0.00\" id=\"");
    _builder.append(name);
    _builder.append("\" ");
    CharSequence _handleNonMathExp = this.handleNonMathExp();
    _builder.append(_handleNonMathExp);
    _builder.append(">");
    return _builder;
  }
  
  protected CharSequence _compute(final ShortText type, final Name name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<input class=\"");
    _builder.append(this.formClass);
    _builder.append("\" type=\"text\" id=\"");
    _builder.append(name);
    _builder.append("\" placeholder=\"");
    String _text = name.getText();
    _builder.append(_text);
    _builder.append("\" ");
    CharSequence _handleNonMathExp = this.handleNonMathExp();
    _builder.append(_handleNonMathExp);
    _builder.append(">");
    return _builder;
  }
  
  protected CharSequence _compute(final StringNumber type, final Name name) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _compute(final Name name) {
    return name.getText();
  }
  
  protected String _compute(final Type type) {
    return type.getText();
  }
  
  public CharSequence compileClass(final Form form) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _startHTML = this.startHTML();
    _builder.append(_startHTML);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("<form>");
    _builder.newLine();
    {
      EList<Input> _content = form.getContent();
      for(final Input input : _content) {
        _builder.append("\t");
        CharSequence _compute = this.compute(input);
        _builder.append(_compute, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("<br>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<input type=\"submit\" class=\"btn btn-primary\" value=\"Submit\" onClick=\"submitHandler()\">");
    _builder.newLine();
    _builder.append("</form>");
    _builder.newLine();
    _builder.newLine();
    CharSequence _compilejs = this.compilejs(form);
    _builder.append(_compilejs);
    _builder.newLineIfNotEmpty();
    CharSequence _endHTML = this.endHTML();
    _builder.append(_endHTML);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compilejs(final Form form) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<script>");
    _builder.newLine();
    _builder.append("function submitHandler(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//When submit");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//foreach expression");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//Is hold?");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//If all is hold");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//Submit");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//Else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//(Give error)?");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</script>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence startHTML() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<style>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("height:45px;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("width:100%;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</style>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<title>Form page demo</title>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6\" crossorigin=\"anonymous\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf\" crossorigin=\"anonymous\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body style=\"background-color:#FEFEFE\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf\" crossorigin=\"anonymous\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div style=\"margin:0 auto; width: 38%; background-color:#FFF; padding:5%; padding-top:6%\">");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence endHTML() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compute(final EObject input) {
    if (input instanceof Input) {
      return _compute((Input)input);
    } else if (input instanceof Name) {
      return _compute((Name)input);
    } else if (input instanceof Type) {
      return _compute((Type)input);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(input).toString());
    }
  }
  
  public void handleExp(final EObject exp) {
    if (exp instanceof Is) {
      _handleExp((Is)exp);
      return;
    } else if (exp instanceof Length) {
      _handleExp((Length)exp);
      return;
    } else if (exp instanceof Focus) {
      _handleExp((Focus)exp);
      return;
    } else if (exp instanceof GreaterThanInclusive) {
      _handleExp((GreaterThanInclusive)exp);
      return;
    } else if (exp instanceof Optional) {
      _handleExp((Optional)exp);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
  
  public CharSequence compute(final Type type, final Name name) {
    if (type instanceof Generic) {
      return _compute((Generic)type, name);
    } else if (type instanceof LongText) {
      return _compute((LongText)type, name);
    } else if (type instanceof Money) {
      return _compute((Money)type, name);
    } else if (type instanceof ShortText) {
      return _compute((ShortText)type, name);
    } else if (type instanceof StringNumber) {
      return _compute((StringNumber)type, name);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(type, name).toString());
    }
  }
}
