/*
 * generated by Xtext 2.24.0
 */
package form.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import form.formDSL.Form
import form.formDSL.Input
import form.formDSL.Name
import form.formDSL.Type
import form.formDSL.Expression
import form.formDSL.Generic
import form.formDSL.LongText
import form.formDSL.Money
import form.formDSL.StringNumber
import form.formDSL.ShortText
import form.formDSL.Optional
import form.formDSL.Focus
import form.formDSL.Length
import form.formDSL.Is
import form.formDSL.GreaterThanInclusive

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FormDSLGenerator extends AbstractGenerator {

	var formClass = "form-control form-control-sm"
	var isRequired = true;
	var hasFocus = false;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val form = resource.allContents.filter(Form).next
		fsa.generateFile("someFile.html", form.compileClass);
	}

	
	def dispatch CharSequence compute(Input input) {
		hasFocus = false
		isRequired = true
		for (Expression exp : input.expression) {
			exp.handleExp
		}
		'''
			<label class="form-label">«input.name.compute»:</label>
			«compute(input.type, input.name)»
		'''
	}
	
	def dispatch void handleExp(Optional exp){
		isRequired = false
	}
	
	def dispatch void handleExp(Focus exp){
		hasFocus = true
	}
	
	def dispatch void handleExp(Is exp){
		System::out.println("Is ")
		exp.comp.handleExp
		System::out.println(exp.value)
		//Find a way to generate simple verification method in JS for this property related to the input.
	}
	def dispatch void handleExp(Length exp){
		System::out.println("Length ")
	}
	
	def dispatch void handleExp(GreaterThanInclusive exp){
		System::out.println(">= ")
	}

	def CharSequence handleNonMathExp(){
		'''
		«IF isRequired» required «ENDIF» 
		«IF hasFocus» autofocus «ENDIF»
		'''
	}

	def dispatch CharSequence compute(Generic type, Name name) {
		'''<input class="«formClass»" type="«type.text»" id="«name»" placeholder="«name.text»" «handleNonMathExp»>'''
	}

	def dispatch CharSequence compute(LongText type, Name name) {
		'''<textarea class="«formClass»" id="«name»" rows="8" cols="50" placeholder="«name.text»" «handleNonMathExp»></textarea>'''
	}

	def dispatch CharSequence compute(Money type, Name name) {
		'''<input class="«formClass»" type="number" min="0.00" max="10000.00" step="0.01" placeholder="0.00" id="«name»" «handleNonMathExp»>'''
	}

	def dispatch CharSequence compute(ShortText type, Name name) {
		'''<input class="«formClass»" type="text" id="«name»" placeholder="«name.text»" «handleNonMathExp»>'''
	}

	def dispatch CharSequence compute(StringNumber type, Name name) {
		''''''
	}

	def dispatch CharSequence compute(Name name) {
		name.text
	}

	def dispatch String compute(Type type) {
		type.text
	}

	def CharSequence compileClass(Form form) {
		'''
			«startHTML()»
			
			<form>
				«FOR input : form.content»
					«input.compute»
				«ENDFOR»
				<br>
				<input type="submit" class="btn btn-primary" value="Submit" onClick="submitHandler()">
			</form>
			
			«form.compilejs»
			«endHTML»
		'''
	}

	def CharSequence compilejs(Form form) {
		'''
			<script>
			function submitHandler(){
				//When submit
					//foreach expression
						//Is hold?
					//If all is hold
						//Submit
					//Else
						//(Give error)?
			}
			
			</script>
		'''
	}

	def CharSequence startHTML() {
		'''
			<!DOCTYPE html>
			<html>
				<head>
				<style>
				input{
					height:45px;
					width:100%;
				}
				</style>
				<title>Form page demo</title>
				
				<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
				<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>
				
				</head>
			<body style="background-color:#FEFEFE">
			    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>
				<div style="margin:0 auto; width: 38%; background-color:#FFF; padding:5%; padding-top:6%">
		'''
	}

	def CharSequence endHTML() {
		'''
				</div>
			</body>
			</html>
		'''
	}
}
