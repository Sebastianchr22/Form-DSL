/*
 * generated by Xtext 2.24.0
 */
package form.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import form.ide.contentassist.antlr.internal.InternalFormDSLParser;
import form.services.FormDSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FormDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FormDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FormDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getExpAccess().getAlternatives_0(), "rule__Exp__Alternatives_0");
			builder.put(grammarAccess.getComparisonAccess().getAlternatives(), "rule__Comparison__Alternatives");
			builder.put(grammarAccess.getFormAccess().getGroup(), "rule__Form__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_3(), "rule__Type__Group_3__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_4(), "rule__Type__Group_4__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getExpAccess().getGroup(), "rule__Exp__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup_0_0(), "rule__Exp__Group_0_0__0");
			builder.put(grammarAccess.getExpAccess().getGroup_0_1(), "rule__Exp__Group_0_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_0(), "rule__Comparison__Group_0__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_2(), "rule__Comparison__Group_2__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_3(), "rule__Comparison__Group_3__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_4(), "rule__Comparison__Group_4__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_5(), "rule__Comparison__Group_5__0");
			builder.put(grammarAccess.getFormAccess().getContentAssignment_2(), "rule__Form__ContentAssignment_2");
			builder.put(grammarAccess.getInputAccess().getTypeAssignment_0(), "rule__Input__TypeAssignment_0");
			builder.put(grammarAccess.getInputAccess().getNameAssignment_1(), "rule__Input__NameAssignment_1");
			builder.put(grammarAccess.getInputAccess().getExpressionAssignment_2(), "rule__Input__ExpressionAssignment_2");
			builder.put(grammarAccess.getTypeAccess().getTextAssignment_0_1(), "rule__Type__TextAssignment_0_1");
			builder.put(grammarAccess.getTypeAccess().getTextAssignment_1_1(), "rule__Type__TextAssignment_1_1");
			builder.put(grammarAccess.getTypeAccess().getTextAssignment_2_1(), "rule__Type__TextAssignment_2_1");
			builder.put(grammarAccess.getTypeAccess().getTextAssignment_3_1(), "rule__Type__TextAssignment_3_1");
			builder.put(grammarAccess.getTypeAccess().getTextAssignment_4_1(), "rule__Type__TextAssignment_4_1");
			builder.put(grammarAccess.getNameAccess().getTextAssignment(), "rule__Name__TextAssignment");
			builder.put(grammarAccess.getExpressionAccess().getTextAssignment_0_1(), "rule__Expression__TextAssignment_0_1");
			builder.put(grammarAccess.getExpressionAccess().getTextAssignment_1_1(), "rule__Expression__TextAssignment_1_1");
			builder.put(grammarAccess.getExpAccess().getTextAssignment_0_0_1(), "rule__Exp__TextAssignment_0_0_1");
			builder.put(grammarAccess.getExpAccess().getTextAssignment_0_1_1(), "rule__Exp__TextAssignment_0_1_1");
			builder.put(grammarAccess.getExpAccess().getCompAssignment_1(), "rule__Exp__CompAssignment_1");
			builder.put(grammarAccess.getExpAccess().getValueAssignment_2(), "rule__Exp__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FormDSLGrammarAccess grammarAccess;

	@Override
	protected InternalFormDSLParser createParser() {
		InternalFormDSLParser result = new InternalFormDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FormDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FormDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
